// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*setCodeDelegationMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SetCodeDelegation) MarshalJSON() ([]byte, error) {
	type SetCodeDelegation struct {
		From   common.Address `json:"from" gencodec:"required"`
		Nonce  hexutil.Uint64 `json:"nonce" gencodec:"required"`
		Target common.Address `json:"target" gencodec:"required"`
	}
	var enc SetCodeDelegation
	enc.From = s.From
	enc.Nonce = hexutil.Uint64(s.Nonce)
	enc.Target = s.Target
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SetCodeDelegation) UnmarshalJSON(input []byte) error {
	type SetCodeDelegation struct {
		From   *common.Address `json:"from" gencodec:"required"`
		Nonce  *hexutil.Uint64 `json:"nonce" gencodec:"required"`
		Target *common.Address `json:"target" gencodec:"required"`
	}
	var dec SetCodeDelegation
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.From == nil {
		return errors.New("missing required field 'from' for SetCodeDelegation")
	}
	s.From = *dec.From
	if dec.Nonce == nil {
		return errors.New("missing required field 'nonce' for SetCodeDelegation")
	}
	s.Nonce = uint64(*dec.Nonce)
	if dec.Target == nil {
		return errors.New("missing required field 'target' for SetCodeDelegation")
	}
	s.Target = *dec.Target
	return nil
}
